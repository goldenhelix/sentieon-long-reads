name: Sentieon Alignment with Minimap2
description: Re-align an input BAM/CRAM/uBAM/uCRAM file with minimap2
auto_generate_session_for_account: "{workspaceBot}"

parameters:
  - name: input_file
    label: "Input Alignment File (Default: BAM)"
    type: file
    supports_location_mode: 'read_only'
    help: Input alignment file to re-align. This workflow supports FASTQs, BAMs, CRAMs, uBAMs, and uCRAMs.

  - name: sample_name
    label: Sample Name (Optional)
    type: string
    optional: true
    help: Sample name to use for the output file. If not provided, the basename of the input file will be used.

  - name: output_folder
    label: Output Folder
    type: directory
    supports_location_mode: 'no_append'
    help: Folder where output files will be written.

  - name: tech
    label: Technology
    help: Sequencing technology used to generate the reads. 
    type: enum
    choices: ["HiFi", "ONT"]

  - name: ref_fasta
    label: Reference File (FASTA)
    type: file  
    supports_location_mode: 'read_only'
    group: Advanced Options
    optional: true
    help: Reference file to use for alignment. If not provided, the default reference file will be used.

  - name: model_base_path
    label: Sentieon Models Base Path
    group: Advanced Options 
    type: directory
    supports_location_mode: 'read_only'
    optional: true
    help: Path to the Sentieon models base directory. If not provided, the default models will be used.

agent_requirements:
  cpu_cores: 32
  memory_gb: 64

steps:
  - name: align
    description: Run alignment
    type: cmd
    docker:
      image: registry.goldenhelix.com/public/sentieon:202503
    args: 
      - |-
        set -eu pipefail

        # License configuration
        export SENTIEON_LICENSE="$GH_SERVER:8990"
        licsrvr=$(sentieon licclnt ping --server "$GH_SERVER:8990")
        # if [ "$licsrvr" != "0" ]; then
        #   echo "License server not responding"
        #   exit 1
        # else 
        #   echo "License server responding"
        # fi

        # Agent setup
        echo "*************************"
        echo "Agent allocated..."
        echo -e "\tCPU Cores: $AGENT_CPU_CORES"
        mem_gb=$((AGENT_MEMORY_GB - 2))
        echo -e "\tAvailable Memory: ${mem_gb}GB"

        # Parameter validation
        pattern=" | "
        if [[ "$sample_name" =~ "$pattern" ]]; then
          echo "Sample name should not contain whitespace"
          exit 1
        fi

        # If sample name is not set, get it as the basename of inputfile
        if [ -z "$sample_name" ]; then
          sample_name=$(basename "$input_file")
          sample_name="${sample_name%%.*}"
        fi
        echo "Sample name: $sample_name"
        echo "*************************"

        # Define output filename
        output_bam="${output_folder}/${sample_name}_minimap2.bam"
        #if [ -f "${output_bam}" ]; then
        #  echo "Output already exists: ${output_bam}"
        #  exit 0
        #fi

        # Create output directory if it doesn't exist
        mkdir -p "$output_folder" || { echo "Failed to create output directory"; exit 1; }

        # Use scratch directory for temporary files
        workdir="/scratch"
        mkdir -p "$workdir" || { echo "Failed to create work directory"; exit 1; }
        cd "$workdir" || { echo "Failed to change to work directory"; exit 1; }
        
        # Set up logging
        logfile=${sample_name}_minimap2_run.log
        exec > >(tee -a "$logfile") 2>&1 || { echo "Failed to redirect stdout and stderr to $logfile"; exit 1; }

        echo "*************************"
        echo "Running Sentieon Minimap2 Alignment..."
        echo "Input file: $input_file"
        echo "Output: $output_bam"
        echo "Technology: $tech"
        echo "*************************"

        # Select reference file
        echo "Selecting reference file..."
        if [ -z "$ref_fasta" ]; then
          echo "No reference file provided, using default reference file..."
          ref_fasta="$WORKSPACE_DIR/${RESOURCES_PATH}/${REFERENCE_PATH}"
          if [ ! -f "$ref_fasta" ]; then
            echo "The default reference file does not exist at $ref_fasta"
            echo "Please run the task Download Genomic Reference to download the reference and then re-run this task"
            exit 1
          fi
        fi

        # Select model base path
        if [ -z "$model_base_path" ]; then
          echo "No model base path provided, using default model base path..."
          model_base_path="$WORKSPACE_DIR/${RESOURCES_PATH}/sentieon_models"
          if [ ! -d "$model_base_path" ]; then
            echo "The default models do not exist at $model_base_path"
            echo "Please run the task Download Sentieon Models to download the models and then re-run this task"
            exit 1
          fi
        fi

        # Select model bundle based on technology
        if [ "$tech" == "ONT" ]; then
          model_bundle="${model_base_path}/DNAscopeONT2.1.bundle"
        elif [ "$tech" == "HiFi" ]; then
          model_bundle="${model_base_path}/DNAscopePacBio2.1.bundle"
        else
          echo "Invalid technology: $tech"
          exit 1
        fi

        if [ ! -f "$model_bundle" ]; then
          echo "Model bundle does not exist at $model_bundle. Please run the task Download Sentieon Models to download the models and then re-run this task"
          exit 1
        fi
        echo "Using model bundle: $model_bundle"

        # Copy reference file and input file to work directory
        echo "Copying reference file and input file to work directory..."
        ref_fasta_basename=$(basename "$ref_fasta")
        input_file_basename=$(basename "$input_file")
        start_time=$SECONDS
        cp "$ref_fasta" ./"$ref_fasta_basename" || { echo "Failed to copy reference FASTA"; exit 1; }
        cp "$ref_fasta".fai ./"$ref_fasta_basename".fai || { echo "Failed to copy reference FASTA index"; exit 1; }
        cp "$input_file" ./"$input_file_basename" || { echo "Failed to copy input file"; exit 1; }
        echo "Reference file and input file copied to $ref_fasta_basename and $input_file_basename in $((SECONDS - start_time)) seconds"

        # Set read group information
        read_group="@RG\tID:${sample_name}\tSM:${sample_name}\tPL:PACBIO"
        
        # Run the alignment
        start_time=$SECONDS
        
        # Run minimap2 and pipe to sorting utility
        # Check file extension and process accordingly
        if [[ "$input_file" == *.bam ]] || [[ "$input_file" == *.cram ]]; then
          echo "Processing BAM/CRAM with FASTQ conversion"
          { ( samtools fastq -@ $AGENT_CPU_CORES -T '*' "$input_file_basename" | \
            sentieon minimap2 -y -t $AGENT_CPU_CORES -a -Y -R "$read_group" \
            -x "${model_bundle}/minimap2.model" "$ref_fasta_basename" - || \
            { echo "Minimap2 error"; false; } ) \
            2>&3 | sentieon util sort -o "${sample_name}_minimap2.bam" -t $AGENT_CPU_CORES --sam2bam -i - ;} \
            3>&1 1>&2 || { echo "Alignment failed"; exit 1; }
        else
          echo "Processing FASTQ input directly"
          { ( sentieon minimap2 -y -t $AGENT_CPU_CORES -a -Y -R "$read_group" \
            -x "${model_bundle}/minimap2.model" "$ref_fasta_basename" "$input_file_basename" || \
            { echo "Minimap2 error"; false; } ) \
            2>&3 | sentieon util sort -o "${sample_name}_minimap2.bam" -t $AGENT_CPU_CORES --sam2bam -i - ;} \
            3>&1 1>&2 || { echo "Alignment failed"; exit 1; }
        fi

        duration=$((SECONDS - start_time))
        file_size=$(stat -c%s "${sample_name}_minimap2.bam")
        echo "Alignment completed in $duration seconds"
        echo "Output file size: $file_size bytes"

        # Copy output files to output folder
        cp "${sample_name}_minimap2.bam"* "$output_folder" || { echo "Failed to copy output files"; exit 1; }
        
        echo "*************************"
        echo "Alignment complete"
        echo "Output: $output_folder/${sample_name}_minimap2.bam"
        echo "Disk usage: $(du -sh "$output_folder" | cut -f1)"
        echo "*************************"
        
        # Copy log file to output folder
        cp -f "$logfile" "$output_folder"/ || { echo "Failed to copy log file"; exit 1; }
        
        cd "$TASK_DIR"

  - name: update_sample_catalog
    description: Add Minimap2 Output to Sample Catalog
    type: cmd
    docker:
      image: ${VSPIPELINE_DOCKER_IMAGE}
    args:
      - |-
        set -eu pipefail

        export GOLDENHELIX_USERDATA=${WORKSPACE_DIR}/AppData

        cd "${output_folder}"
        output_bam_path="${output_folder//${WORKSPACE_DIR}\//}/${sample_name}_minimap2.bam"
        gautil client catalog-upsert SampleCatalog \
          Sample="$sample_name" \
          BAMPath="$output_bam_path" || \
          { echo "Failed to update sample catalog"; exit 1; }
        echo "Updated sample $sample_name with BAM: ${output_bam_path}"